% Building Hedwig
% Yang Zhang

Pre-requisites
==============

For the core itself:

- JDK 6: <http://java.sun.com/>.  Ensure `$JAVA_HOME` is correctly set.
- Maven 2: <http://maven.apache.org/>.
- Protocol Buffers 2.3.0: <http://protobuf.googlecode.com/>.
- Zookeeper 3.4.0: <http://hadoop.apache.org/zookeeper/>.  See below.
- Bookkeeper 3.4.0: <http://hadoop.apache.org/zookeeper/>.  See below.

Hedwig has been tested on Windows XP, Linux 2.6, and OS X.

For the deployment and distributed support scripts in `hw.bash`:

- Ant: <http://ant.apache.org/>, if you want to build Zookeeper.
- Bash: <http://www.gnu.org/software/bash/>.
- Coreutils: <http://www.gnu.org/software/coreutils/>.
- Expect: <http://expect.nist.gov/>, if you want `unbuffer`.
- Findutils: <http://www.gnu.org/software/findutils/>.
- OpenSSH: <http://www.openssh.com/>.
- Python 2.6: <http://python.org/>.

Protocol Buffers
----------------

Hedwig requires the use of the Java runtime libraries of Protocol Buffers 2.3.0.
These libraries need to be installed into your local maven repository. (Maven allows
multiple versions to be installed.) To install protocol buffels to your local
repository, you have to download the tarball and follow the README.txt 
instructions. Note that you must first install the C++ package which contains the
compiler (protoc) before you can build the java libraries. That will install the
library jar's in the local maven repository where Hedwig is currently configured
to point to.

Zookeeper and Bookkeeper
------------------------

Hedwig currently requires the version of Bookkeeper maintained in Apache's current
trunk SVN respository (version 3.4.0). This is not a released version yet but certain
features needed for BookKeeper are only available there.

Hedwig also depends on ZK testing code for its own testing code.

Since Hedwig is a Maven project, all these dependencies must be made available
as Maven artifacts.  However, neither ZK nor BK are currently Mavenized.
Hedwig provides some bash scripts to ease the installation of ZK, ZK tests, and
BK, all as Maven artifacts.

Currently, we have included the necessary ZooKeeper and BookKeeper jars in the Hedwig
source itself in the $HEDWIG_DIR/server/lib directory. There is no need to retrieve
them directly from the Apache download site as they are non-released trunk versions.

#Not relevant right now since we already have the ZK jars already in the Hedwig source.
To fetch and build ZK 3.4.0 (and its tests) in the current directory, run:

  $HEDWIG_DIR/scripts/hw.bash get-zk

#Not relevant right now, but when we start using the apache version of BK, to
build the local version of BK:

  $HEDWIG_DIR/scripts/hw.bash get-bk

The $HEDWIG_DIR/server/lib directory contains all of the the class and source jars for
ZK, ZK tests, and BK.  To install these, go to that directory and run the following
command to install them into your local maven repository:

  $HEDWIG_DIR/scripts/hw.bash install-zk-bk

Command-Line Instructions
=========================

From the main Hedwig directory, run `mvn package`.  This will produce the
executable jars for both the client and server, as well as a server "assembly
jar" containing all dependencies as well for easier deployment.

See the User's Guide for instructions on running and usage.

Eclipse Instructions
====================

To check out, build, and develop using Eclipse:

1. Install the Subclipse plugin.  Update site:
   <http://subclipse.tigris.org/update_1.4.x>.

2. Install the Maven plugin.  Update site:
   <http://m2eclipse.sonatype.org/update>.  From the list of packages available
   from this site, select everything under the "Maven Integration" category,
   and from the optional components select the ones with the word "SCM" in them.

3. Go to Preferences > Team > SVN.  For the SVN interface, choose "Pure Java".

4. Choose File > New > Project... > Maven > Checkout Maven Projects from SCM.

5. For the SCM URL type, choose SVN.  For the URL, enter
   SVN URL.  Maven will automatically
   create a top-level Eclipse project for each of the 4 Maven modules
   (recommended).  If you want fewer top-level projects, uncheck the option of
   having a project for each module (under Advanced).

6. Right-click on the `protocol` project and choose Run As > Maven
   generate-sources.  This will generate the Java and C++ code for Protocol
   Buffers.

7. Refresh the workspace to pick up the generated code and add
   `hedwig/protocol/target/generated-sources/java` as a source folder.  (6 & 7
   should really be doable automatically, but I haven't figured out how.)

You are now ready to run and debug the client and server code.  See the User's
Guide for instructions on running and usage.

Utilities
=========

Removing Conflicting Files in Jars
----------------------------------

The Maven assembly plugin that produces the fat assembly jar may end up putting
into the jar files with the same conflicting paths from multiple dependencies.
This makes working with the files from certain tools (like `jar`) a bit jarring.
In our case, these files are not things like class files, but rather README and
LICENSE files, so we can safely remove conflicts by choosing an arbitrary winner.
To do so, run:

  $HEDWIG_DIR/scripts/hw.bash strip-jar

Adjusting Logging
-----------------

The logging level is something that is baked into the jar in the
`log4j.properties` resource.  However, it would be wasteful to go through a
Maven build cycle to update and adjust this.  If you're working from a source
tree, it's also annoying to have to edit a source file to adjust the logging.

We have a little script for tweaking the logging level.  After running
`strip-jar`, run:

  $HEDWIG_DIR/scripts/hw.bash set-logging WARN

To see what the current logging level is:

  $HEDWIG_DIR/scripts/hw.bash get-logging
