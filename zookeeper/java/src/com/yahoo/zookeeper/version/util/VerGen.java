package com.yahoo.zookeeper.version.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class VerGen {
	private static final String PACKAGE_NAME = "com.yahoo.zookeeper.version";
	private static final String TYPE_NAME = "Info";

	static void printUsage() {
		System.out.print("Usage:\tjava  -cp <classpath> com.yahoo.zookeeper."
				+ "version.util.VerGen maj.min.micro rev buildDate");
		System.exit(1);
	}

	static void generateFile(int maj, int min, int micro, int rev,
			String buildDate) {
		String path = PACKAGE_NAME.replaceAll("\\.", "/");
		File pkgdir = new File(path);
		if (!pkgdir.exists()) {
			// create the pkg directory
			boolean ret = pkgdir.mkdirs();
			if (!ret) {
				System.out.println("Cannnot create directory: " + path);
				System.exit(1);
			}
		} else if (!pkgdir.isDirectory()) {
			// not a directory
			System.out.println(path + " is not a directory.");
			System.exit(1);
		}
		File file = new File(pkgdir, TYPE_NAME + ".java");
		try {
			FileWriter w = new FileWriter(file);
			w.write("// Do not edit!\n// File generated by com.yahoo.zookeeper"
					+ ".version.util.VerGen.\n");
			w.write("package " + PACKAGE_NAME + ";\n\n");
			w.write("public interface " + TYPE_NAME + " {\n");
			w.write("    public static final int MAJOR=" + maj + ";\n");
			w.write("    public static final int MINOR=" + min + ";\n");
			w.write("    public static final int MICRO=" + micro + ";\n");
			w.write("    public static final int REVISION=" + rev + ";\n");
			w.write("    public static final String BUILD_DATE=\"" + buildDate
					+ "\";\n");
			w.write("}\n");
			w.close();
		} catch (IOException e) {
			System.out.println("Unable to generate version.Info file: "
					+ e.getMessage());
			System.exit(1);
		}
	}

	/**
	 * Emits a com.yahoo.zookeeper.version.Info interface file with version and
	 * revision information constants set to the values passed in as command
	 * line parameters. The file is created in the current directory. <br>
	 * Usage: java com.yahoo.zookeeper.version.util.VerGen maj.min.micro rev
	 * buildDate
	 * 
	 * @param args
	 *            <ul>
	 *            <li>maj - major version number
	 *            <li>min - minor version number
	 *            <li>micro - minor minor version number
	 *            <li>rev - current SVN revision number
	 *            <li>buildDate - date the build
	 *            </ul>
	 */
	public static void main(String[] args) {
		if (args.length != 3)
			printUsage();
		try {
			String[] v = args[0].split("\\.");
			if (v.length != 3) {
				System.err
						.println("Ivalid version number format, must be \"x.y.z\"");
				System.exit(1);
			}
			int maj = Integer.parseInt(v[0]);
			int min = Integer.parseInt(v[1]);
			int micro = Integer.parseInt(v[2]);
			int rev = Integer.parseInt(args[1]);
			generateFile(maj, min, micro, rev, args[2]);
		} catch (NumberFormatException e) {
			System.err
					.println("All version-related parameters must be invalid integers!");
			System.exit(1);
		}
	}

}
